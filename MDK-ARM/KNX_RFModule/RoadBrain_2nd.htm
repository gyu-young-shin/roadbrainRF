<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [KNX_RFModule\RoadBrain_2nd.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image KNX_RFModule\RoadBrain_2nd.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Nov 14 10:25:40 2023
<BR><P>
<H3>Maximum Stack Usage =        216 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Rs485_proc &rArr; Modbus_Rtu_Proc_485 &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3f]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f]">ADC3_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[22]">ADC1_2_IRQHandler</a> from stm32f1xx_it.o(i.ADC1_2_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3f]">ADC3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4f]">ADC_DMAConvCplt</a> from stm32f1xx_hal_adc.o(i.ADC_DMAConvCplt) referenced from stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[51]">ADC_DMAError</a> from stm32f1xx_hal_adc.o(i.ADC_DMAError) referenced from stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[50]">ADC_DMAHalfConvCplt</a> from stm32f1xx_hal_adc.o(i.ADC_DMAHalfConvCplt) referenced from stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[a]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[25]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[26]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel1_IRQHandler</a> from stm32f1xx_it.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[20]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[21]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[48]">DMA2_Channel1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[49]">DMA2_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4a]">DMA2_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4b]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[d]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[16]">EXTI0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[38]">EXTI15_10_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[17]">EXTI1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[18]">EXTI2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[19]">EXTI3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1a]">EXTI4_IRQHandler</a> from stm32f1xx_it.o(i.EXTI4_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[27]">EXTI9_5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[14]">FLASH_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[40]">FSMC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[8]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[30]">I2C1_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2f]">I2C1_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[32]">I2C2_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[31]">I2C2_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[9]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[7]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[11]">PVD_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[e]">PendSV_Handler</a> from stm32f1xx_it.o(i.PendSV_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[15]">RCC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[39]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[13]">RTC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6]">Reset_Handler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[41]">SDIO_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[33]">SPI1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[34]">SPI2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[43]">SPI3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[c]">SVC_Handler</a> from stm32f1xx_it.o(i.SVC_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[f]">SysTick_Handler</a> from stm32f1xx_it.o(i.SysTick_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4d]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[12]">TAMPER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[28]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2b]">TIM1_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2a]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[29]">TIM1_UP_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2c]">TIM2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2d]">TIM3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2e]">TIM4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[42]">TIM5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[46]">TIM6_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[47]">TIM7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3b]">TIM8_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3e]">TIM8_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3d]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3c]">TIM8_UP_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[44]">UART4_IRQHandler</a> from stm32f1xx_it.o(i.UART4_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[45]">UART5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[35]">USART1_IRQHandler</a> from stm32f1xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[36]">USART2_IRQHandler</a> from stm32f1xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[37]">USART3_IRQHandler</a> from stm32f1xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3a]">USBWakeUp_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[23]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[24]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[b]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[10]">WWDG_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[54]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[54]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[53]">busReadByte</a> from w5100srelfunctions.o(i.busReadByte) referenced from w5100s_proc.o(i.Wiznet_W5100S_Init)
 <LI><a href="#[52]">busWriteByte</a> from w5100srelfunctions.o(i.busWriteByte) referenced from w5100s_proc.o(i.Wiznet_W5100S_Init)
 <LI><a href="#[55]">cmd_help</a> from debug.o(i.cmd_help) referenced from debug.o(.constdata)
 <LI><a href="#[6e]">eth_cmd_addr</a> from w5100s_proc.o(i.eth_cmd_addr) referenced from w5100s_proc.o(.constdata)
 <LI><a href="#[5d]">eth_cmd_baud</a> from w5100s_proc.o(i.eth_cmd_baud) referenced from w5100s_proc.o(.constdata)
 <LI><a href="#[64]">eth_cmd_ccnt</a> from w5100s_proc.o(i.eth_cmd_ccnt) referenced from w5100s_proc.o(.constdata)
 <LI><a href="#[70]">eth_cmd_enable</a> from w5100s_proc.o(i.eth_cmd_enable) referenced from w5100s_proc.o(.constdata)
 <LI><a href="#[6d]">eth_cmd_fcode</a> from w5100s_proc.o(i.eth_cmd_fcode) referenced from w5100s_proc.o(.constdata)
 <LI><a href="#[58]">eth_cmd_gw</a> from w5100s_proc.o(i.eth_cmd_gw) referenced from w5100s_proc.o(.constdata)
 <LI><a href="#[56]">eth_cmd_help</a> from w5100s_proc.o(i.eth_cmd_help) referenced from w5100s_proc.o(.constdata)
 <LI><a href="#[65]">eth_cmd_id</a> from w5100s_proc.o(i.eth_cmd_id) referenced from w5100s_proc.o(.constdata)
 <LI><a href="#[62]">eth_cmd_info</a> from w5100s_proc.o(i.eth_cmd_info) referenced from w5100s_proc.o(.constdata)
 <LI><a href="#[75]">eth_cmd_inttime</a> from w5100s_proc.o(i.eth_cmd_inttime) referenced from w5100s_proc.o(.constdata)
 <LI><a href="#[57]">eth_cmd_ip</a> from w5100s_proc.o(i.eth_cmd_ip) referenced from w5100s_proc.o(.constdata)
 <LI><a href="#[6f]">eth_cmd_length</a> from w5100s_proc.o(i.eth_cmd_length) referenced from w5100s_proc.o(.constdata)
 <LI><a href="#[5f]">eth_cmd_mdi</a> from w5100s_proc.o(i.eth_cmd_mdi) referenced from w5100s_proc.o(.constdata)
 <LI><a href="#[5e]">eth_cmd_mrs</a> from w5100s_proc.o(i.eth_cmd_mrs) referenced from w5100s_proc.o(.constdata)
 <LI><a href="#[60]">eth_cmd_mrtu</a> from w5100s_proc.o(i.eth_cmd_mrtu) referenced from w5100s_proc.o(.constdata)
 <LI><a href="#[61]">eth_cmd_mtcp</a> from w5100s_proc.o(i.eth_cmd_mtcp) referenced from w5100s_proc.o(.constdata)
 <LI><a href="#[63]">eth_cmd_reset</a> from w5100s_proc.o(i.eth_cmd_reset) referenced from w5100s_proc.o(.constdata)
 <LI><a href="#[69]">eth_cmd_rtubaud</a> from w5100s_proc.o(i.eth_cmd_rtubaud) referenced from w5100s_proc.o(.constdata)
 <LI><a href="#[6c]">eth_cmd_rtuid</a> from w5100s_proc.o(i.eth_cmd_rtuid) referenced from w5100s_proc.o(.constdata)
 <LI><a href="#[71]">eth_cmd_rtuinfo</a> from w5100s_proc.o(i.eth_cmd_rtuinfo) referenced from w5100s_proc.o(.constdata)
 <LI><a href="#[73]">eth_cmd_rtuint</a> from w5100s_proc.o(i.eth_cmd_rtuint) referenced from w5100s_proc.o(.constdata)
 <LI><a href="#[67]">eth_cmd_rtutcp</a> from w5100s_proc.o(i.eth_cmd_rtutcp) referenced from w5100s_proc.o(.constdata)
 <LI><a href="#[68]">eth_cmd_selnum</a> from w5100s_proc.o(i.eth_cmd_selnum) referenced from w5100s_proc.o(.constdata)
 <LI><a href="#[59]">eth_cmd_sip</a> from w5100s_proc.o(i.eth_cmd_sip) referenced from w5100s_proc.o(.constdata)
 <LI><a href="#[5a]">eth_cmd_sport</a> from w5100s_proc.o(i.eth_cmd_sport) referenced from w5100s_proc.o(.constdata)
 <LI><a href="#[5c]">eth_cmd_spwd</a> from w5100s_proc.o(i.eth_cmd_spwd) referenced from w5100s_proc.o(.constdata)
 <LI><a href="#[5b]">eth_cmd_ssid</a> from w5100s_proc.o(i.eth_cmd_ssid) referenced from w5100s_proc.o(.constdata)
 <LI><a href="#[72]">eth_cmd_tcpinfo</a> from w5100s_proc.o(i.eth_cmd_tcpinfo) referenced from w5100s_proc.o(.constdata)
 <LI><a href="#[74]">eth_cmd_tcpint</a> from w5100s_proc.o(i.eth_cmd_tcpint) referenced from w5100s_proc.o(.constdata)
 <LI><a href="#[6b]">eth_cmd_tcpport</a> from w5100s_proc.o(i.eth_cmd_tcpport) referenced from w5100s_proc.o(.constdata)
 <LI><a href="#[6a]">eth_cmd_tcpsip</a> from w5100s_proc.o(i.eth_cmd_tcpsip) referenced from w5100s_proc.o(.constdata)
 <LI><a href="#[66]">eth_cmd_wifimac</a> from w5100s_proc.o(i.eth_cmd_wifimac) referenced from w5100s_proc.o(.constdata)
 <LI><a href="#[4c]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[4]">wizchip_bus_readdata</a> from wizchip_conf.o(i.wizchip_bus_readdata) referenced 2 times from wizchip_conf.o(.data)
 <LI><a href="#[4]">wizchip_bus_readdata</a> from wizchip_conf.o(i.wizchip_bus_readdata) referenced from wizchip_conf.o(i.reg_wizchip_bus_cbfunc)
 <LI><a href="#[5]">wizchip_bus_writedata</a> from wizchip_conf.o(i.wizchip_bus_writedata) referenced 2 times from wizchip_conf.o(.data)
 <LI><a href="#[5]">wizchip_bus_writedata</a> from wizchip_conf.o(i.wizchip_bus_writedata) referenced from wizchip_conf.o(i.reg_wizchip_bus_cbfunc)
 <LI><a href="#[0]">wizchip_cris_enter</a> from wizchip_conf.o(i.wizchip_cris_enter) referenced 2 times from wizchip_conf.o(.data)
 <LI><a href="#[1]">wizchip_cris_exit</a> from wizchip_conf.o(i.wizchip_cris_exit) referenced 2 times from wizchip_conf.o(.data)
 <LI><a href="#[3]">wizchip_cs_deselect</a> from wizchip_conf.o(i.wizchip_cs_deselect) referenced 2 times from wizchip_conf.o(.data)
 <LI><a href="#[2]">wizchip_cs_select</a> from wizchip_conf.o(i.wizchip_cs_select) referenced 2 times from wizchip_conf.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(.text)
</UL>
<P><STRONG><a name="[173]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[76]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[174]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[175]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[176]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[177]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[178]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[179]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[6]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[17a]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>toupper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, toupper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCommand_Proc
</UL>

<P><STRONG><a name="[116]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485_proc
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs232c_proc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Tcp_Recv_Proc
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRtu_Recv_Proc_485
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRtu_Recv_Proc
</UL>

<P><STRONG><a name="[17b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[17d]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_proc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Data_Send
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485_proc
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs232c_proc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FSMC_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Request_Packet
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Tcp_Recv_Proc
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Rtu_Proc_485
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRtu_Recv_Proc_485
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Rtu_Proc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRtu_Recv_Proc
</UL>

<P><STRONG><a name="[17f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[a2]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_proc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Data_Send
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Station_mode
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect_Tcp_Server
</UL>

<P><STRONG><a name="[164]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_ssid
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_spwd
</UL>

<P><STRONG><a name="[c0]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_ssid
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_spwd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Signal_Strength
</UL>

<P><STRONG><a name="[b1]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ether_UserCommand_Proc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCommand_Proc
</UL>

<P><STRONG><a name="[af]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ether_UserCommand_Proc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCommand_Proc
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Signal_Strength
</UL>

<P><STRONG><a name="[163]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_rtutcp
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_inttime
</UL>

<P><STRONG><a name="[bf]"></a>strtok</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Signal_Strength
</UL>

<P><STRONG><a name="[7b]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_wifimac
</UL>

<P><STRONG><a name="[7f]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_tcpsip
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_tcpport
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_tcpint
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_tcpinfo
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_sport
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_sip
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_selnum
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_rtuint
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_rtuinfo
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_rtuid
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_rtubaud
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_length
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_ip
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_inttime
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_id
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_gw
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_fcode
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_enable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_baud
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_addr
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[180]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[181]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[182]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[7e]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[80]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[183]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[84]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[152]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[77]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[184]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[185]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[22]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.ADC1_2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC1_2_IRQHandler &rArr; HAL_ADC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>ADC_ConversionStop_Disable</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f1xx_hal_adc.o(i.ADC_ConversionStop_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_ConversionStop_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>

<P><STRONG><a name="[4f]"></a>ADC_DMAConvCplt</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f1xx_hal_adc.o(i.ADC_DMAConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_DMAConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[51]"></a>ADC_DMAError</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, stm32f1xx_hal_adc.o(i.ADC_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[50]"></a>ADC_DMAHalfConvCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f1xx_hal_adc.o(i.ADC_DMAHalfConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_DMAHalfConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[95]"></a>ADC_Enable</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, stm32f1xx_hal_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>

<P><STRONG><a name="[96]"></a>AllOff_Output</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, test.o(i.AllOff_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AllOff_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMode_Proc
</UL>

<P><STRONG><a name="[a]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>Buzzer_Sequence</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, buzzer.o(i.Buzzer_Sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Buzzer_Sequence &rArr; PWM_Config &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systic_Callback_Proc
</UL>

<P><STRONG><a name="[9a]"></a>Buzzer_Stop</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, buzzer.o(i.Buzzer_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Buzzer_Stop &rArr; HAL_TIM_PWM_Stop &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Sequence
</UL>

<P><STRONG><a name="[9c]"></a>Comm_Test</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, test.o(i.Comm_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Comm_Test &rArr; SendChar1 &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar1
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar4
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMode_Proc
</UL>

<P><STRONG><a name="[9f]"></a>Connect_Tcp_Server</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, wifi.o(i.Connect_Tcp_Server))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Connect_Tcp_Server &rArr; mprintf &rArr; SendChar &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprintf
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprintf3
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_proc
</UL>

<P><STRONG><a name="[1b]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Channel1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>Debug_proc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, debug.o(i.Debug_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Debug_proc &rArr; UserCommand_Proc &rArr; mprintf &rArr; SendChar &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCommand_Proc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLine_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>Disp_Input</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, test.o(i.Disp_Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Disp_Input
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMode_Proc
</UL>

<P><STRONG><a name="[169]"></a>Disp_Segment</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, repeater.o(i.Disp_Segment))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>Disp_Version</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, repeater.o(i.Disp_Version))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Disp_Version &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment_Disp
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seg_data_set
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI4_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FSMC_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[ae]"></a>Ether_UserCommand_Proc</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, w5100s_proc.o(i.Ether_UserCommand_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Ether_UserCommand_Proc &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Proc
</UL>

<P><STRONG><a name="[b3]"></a>Ethernet_Proc</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, w5100s_proc.o(i.Ethernet_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Ethernet_Proc &rArr; Ether_UserCommand_Proc &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ether_UserCommand_Proc
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Client_Proc
</UL>

<P><STRONG><a name="[d1]"></a>FLASH_PageErase</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_flash_ex.o(i.FLASH_PageErase))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[b4]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f1xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[e0]"></a>FSMC_NORSRAM_Extended_Timing_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f1xx_ll_fsmc.o(i.FSMC_NORSRAM_Extended_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FSMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_Init
</UL>

<P><STRONG><a name="[de]"></a>FSMC_NORSRAM_Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f1xx_ll_fsmc.o(i.FSMC_NORSRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FSMC_NORSRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_Init
</UL>

<P><STRONG><a name="[df]"></a>FSMC_NORSRAM_Timing_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f1xx_ll_fsmc.o(i.FSMC_NORSRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FSMC_NORSRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_Init
</UL>

<P><STRONG><a name="[b6]"></a>FlashRom_Init</STRONG> (Thumb, 638 bytes, Stack size 32 bytes, flashrom.o(i.FlashRom_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FlashRom_Init &rArr; mprintf &rArr; SendChar &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprintf
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>FlashRom_WriteData</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, flashrom.o(i.FlashRom_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FlashRom_WriteData &rArr; mprintf &rArr; SendChar &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprintf
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Proc
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Repeater_Proc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_wifimac
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_tcpsip
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_tcpport
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_tcpint
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_ssid
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_spwd
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_sport
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_sip
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_rtutcp
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_rtuint
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_rtuid
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_rtubaud
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_length
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_ip
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_inttime
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_id
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_gw
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_fcode
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_enable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_baud
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_addr
</UL>

<P><STRONG><a name="[a5]"></a>GetLine_Proc</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, debug.o(i.GetLine_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetLine_Proc &rArr; SendChar &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_proc
</UL>

<P><STRONG><a name="[be]"></a>Get_Signal_Strength</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, wifi.o(i.Get_Signal_Strength))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Get_Signal_Strength &rArr; mprintf3 &rArr; SendChar3 &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprintf3
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_proc
</UL>

<P><STRONG><a name="[c1]"></a>HAL_ADCEx_Calibration_Start</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, stm32f1xx_hal_adc_ex.o(i.HAL_ADCEx_Calibration_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_ADCEx_Calibration_Start &rArr; HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[c3]"></a>HAL_ADCEx_InjectedConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_adc_ex.o(i.HAL_ADCEx_InjectedConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[106]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 338 bytes, Stack size 16 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[92]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_ConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
</UL>

<P><STRONG><a name="[94]"></a>HAL_ADC_ConvHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_ConvHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAHalfConvCplt
</UL>

<P><STRONG><a name="[93]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAError
</UL>

<P><STRONG><a name="[107]"></a>HAL_ADC_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[8f]"></a>HAL_ADC_IRQHandler</STRONG> (Thumb, 290 bytes, Stack size 8 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ADC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_LevelOutOfWindowCallback
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConvCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[c5]"></a>HAL_ADC_Init</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[c4]"></a>HAL_ADC_LevelOutOfWindowCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_LevelOutOfWindowCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f1xx_hal_msp.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[cb]"></a>HAL_ADC_Start_DMA</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[131]"></a>HAL_CRC_Accumulate</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f1xx_hal_crc.o(i.HAL_CRC_Accumulate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CRC_Accumulate
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_MAC_Address
</UL>

<P><STRONG><a name="[cd]"></a>HAL_CRC_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal_crc.o(i.HAL_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CRC_Init &rArr; HAL_CRC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
</UL>

<P><STRONG><a name="[ce]"></a>HAL_CRC_MspInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_CRC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[a3]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 910 bytes, Stack size 16 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[c7]"></a>HAL_DMA_Init</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[cc]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[ac]"></a>HAL_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_proc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Version
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100SReset
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_MAC_Address
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar1
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar4
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Data_Send
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar3
</UL>

<P><STRONG><a name="[b9]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, stm32f1xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_WriteData
</UL>

<P><STRONG><a name="[ba]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_WriteData
</UL>

<P><STRONG><a name="[bb]"></a>HAL_FLASH_Program</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, stm32f1xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_HalfWord
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_WriteData
</UL>

<P><STRONG><a name="[b8]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f1xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_WriteData
</UL>

<P><STRONG><a name="[d5]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, repeater.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[ad]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[d4]"></a>HAL_GPIO_Init</STRONG> (Thumb, 792 bytes, Stack size 36 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FSMC_MspInit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[a8]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Proc
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Input
</UL>

<P><STRONG><a name="[13f]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Proc
</UL>

<P><STRONG><a name="[97]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQ_Function
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_proc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment_Disp
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100SReset
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Client_Proc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar1
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output_Test
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllOff_Output
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Data_Send
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Station_mode
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect_Tcp_Server
</UL>

<P><STRONG><a name="[91]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[d6]"></a>HAL_IWDG_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f1xx_hal_iwdg.o(i.HAL_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
</UL>

<P><STRONG><a name="[10d]"></a>HAL_IWDG_Refresh</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f1xx_hal_iwdg.o(i.HAL_IWDG_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systic_Callback_Proc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
</UL>

<P><STRONG><a name="[132]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[d7]"></a>HAL_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[da]"></a>HAL_MspInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[dc]"></a>HAL_NOR_Init</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, stm32f1xx_hal_nor.o(i.HAL_NOR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_NOR_Init &rArr; HAL_NOR_MspInit &rArr; HAL_FSMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_MspInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Timing_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Extended_Timing_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_ReturnToReadMode
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FSMC_Init
</UL>

<P><STRONG><a name="[dd]"></a>HAL_NOR_MspInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_NOR_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_NOR_MspInit &rArr; HAL_FSMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FSMC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_Init
</UL>

<P><STRONG><a name="[e1]"></a>HAL_NOR_ReturnToReadMode</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, stm32f1xx_hal_nor.o(i.HAL_NOR_ReturnToReadMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NOR_ReturnToReadMode
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_Init
</UL>

<P><STRONG><a name="[ca]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[c9]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[d8]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c2]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, stm32f1xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>

<P><STRONG><a name="[e6]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, stm32f1xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[e7]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[e9]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[e8]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[e5]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[e4]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[ea]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1114 bytes, Stack size 24 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig &rArr; RCC_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Delay
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ec]"></a>HAL_SPI_Init</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>

<P><STRONG><a name="[ed]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, stm32f1xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[db]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[110]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[ee]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[ef]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[f1]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[f6]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, stm32f1xx_hal_msp.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[f7]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC4_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[fc]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[fd]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[fe]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
</UL>

<P><STRONG><a name="[9b]"></a>HAL_TIM_PWM_Stop</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_PWM_Stop &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Stop
</UL>

<P><STRONG><a name="[100]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
</UL>

<P><STRONG><a name="[101]"></a>HAL_UART_MspInit</STRONG> (Thumb, 504 bytes, Stack size 32 bytes, stm32f1xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[8]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[103]"></a>Init_Station_mode</STRONG> (Thumb, 1400 bytes, Stack size 16 bytes, wifi.o(i.Init_Station_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Init_Station_mode &rArr; mprintf &rArr; SendChar &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprintf
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprintf3
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_proc
</UL>

<P><STRONG><a name="[168]"></a>InputKey_Proc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, repeater.o(i.InputKey_Proc))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>Key_Scan</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, mytimer.o(i.Key_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Key_Scan
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systic_Callback_Proc
</UL>

<P><STRONG><a name="[14a]"></a>Make_packet</STRONG> (Thumb, 308 bytes, Stack size 0 bytes, wifi.o(i.Make_packet))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_proc
</UL>

<P><STRONG><a name="[9]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[115]"></a>ModbusRtu_Recv_Proc</STRONG> (Thumb, 556 bytes, Stack size 40 bytes, rs232c.o(i.ModbusRtu_Recv_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ModbusRtu_Recv_Proc &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprintf
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs232c_proc
</UL>

<P><STRONG><a name="[118]"></a>ModbusRtu_Recv_Proc_485</STRONG> (Thumb, 556 bytes, Stack size 40 bytes, rs485.o(i.ModbusRtu_Recv_Proc_485))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ModbusRtu_Recv_Proc_485 &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprintf
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485_proc
</UL>

<P><STRONG><a name="[119]"></a>Modbus_Rtu_Proc</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, rs232c.o(i.Modbus_Rtu_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Modbus_Rtu_Proc &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_crc_16
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar4
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs232c_proc
</UL>

<P><STRONG><a name="[11b]"></a>Modbus_Rtu_Proc_485</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, rs485.o(i.Modbus_Rtu_Proc_485))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Modbus_Rtu_Proc_485 &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_crc_16
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar1
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485_proc
</UL>

<P><STRONG><a name="[11c]"></a>Modbus_Tcp_Proc</STRONG> (Thumb, 390 bytes, Stack size 24 bytes, w5100s_proc.o(i.Modbus_Tcp_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Modbus_Tcp_Proc &rArr; Modbus_Tcp_Recv_Proc &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprintf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Request_Packet
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Tcp_Recv_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Proc
</UL>

<P><STRONG><a name="[121]"></a>Modbus_Tcp_Recv_Proc</STRONG> (Thumb, 612 bytes, Stack size 40 bytes, w5100s_proc.o(i.Modbus_Tcp_Recv_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Modbus_Tcp_Recv_Proc &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprintf
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Tcp_Proc
</UL>

<P><STRONG><a name="[7]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[12a]"></a>Next_Rtu_Index</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, rs232c.o(i.Next_Rtu_Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Next_Rtu_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs232c_proc
</UL>

<P><STRONG><a name="[12c]"></a>Next_Rtu_Index_485</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, rs485.o(i.Next_Rtu_Index_485))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Next_Rtu_Index_485
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485_proc
</UL>

<P><STRONG><a name="[16a]"></a>Output_Proc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, repeater.o(i.Output_Proc))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[127]"></a>Output_Test</STRONG> (Thumb, 378 bytes, Stack size 8 bytes, test.o(i.Output_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Output_Test
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMode_Proc
</UL>

<P><STRONG><a name="[99]"></a>PWM_Config</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, buzzer.o(i.PWM_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = PWM_Config &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Sequence
</UL>

<P><STRONG><a name="[e]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[13c]"></a>Play_Buzzer</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, buzzer.o(i.Play_Buzzer))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMode_Proc
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[128]"></a>Repeater_Proc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, repeater.o(i.Repeater_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Repeater_Proc &rArr; FlashRom_WriteData &rArr; mprintf &rArr; SendChar &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[129]"></a>Rs232c_proc</STRONG> (Thumb, 560 bytes, Stack size 40 bytes, rs232c.o(i.Rs232c_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Rs232c_proc &rArr; Modbus_Rtu_Proc &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Next_Rtu_Index
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Rtu_Proc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRtu_Recv_Proc
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12b]"></a>Rs485_proc</STRONG> (Thumb, 556 bytes, Stack size 40 bytes, rs485.o(i.Rs485_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Rs485_proc &rArr; Modbus_Rtu_Proc_485 &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Next_Rtu_Index_485
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Rtu_Proc_485
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRtu_Recv_Proc_485
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>Seg_data_set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, segment.o(i.Seg_data_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Seg_data_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Version
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>Segment_Disp</STRONG> (Thumb, 436 bytes, Stack size 8 bytes, segment.o(i.Segment_Disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Segment_Disp
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systic_Callback_Proc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Version
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>Select_Client_index</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, w5100s_proc.o(i.Select_Client_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Select_Client_index
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Proc
</UL>

<P><STRONG><a name="[bd]"></a>SendChar</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, debug.o(i.SendChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SendChar &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprintf
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_proc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLine_Proc
</UL>

<P><STRONG><a name="[9d]"></a>SendChar1</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, rs485.o(i.SendChar1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SendChar1 &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Rtu_Proc_485
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Test
</UL>

<P><STRONG><a name="[12d]"></a>SendChar3</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, wifi.o(i.SendChar3))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SendChar3 &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprintf3
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_packet
</UL>

<P><STRONG><a name="[9e]"></a>SendChar4</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rs232c.o(i.SendChar4))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SendChar4 &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Test
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Rtu_Proc
</UL>

<P><STRONG><a name="[b2]"></a>Send_Ethernet_Packet</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, w5100s_proc.o(i.Send_Ethernet_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485_proc
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs232c_proc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_wifimac
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_tcpsip
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_tcpport
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_tcpint
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_tcpinfo
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_ssid
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_spwd
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_sport
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_sip
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_selnum
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_rtutcp
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_rtuint
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_rtuinfo
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_rtuid
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_rtubaud
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_reset
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_mtcp
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_mrtu
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_mrs
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_mdi
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_length
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_ip
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_inttime
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_info
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_id
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_help
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_gw
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_fcode
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_enable
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_ccnt
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_baud
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_addr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View_Packet_Data
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Request_Packet
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Client_Proc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Tcp_Recv_Proc
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Proc
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ether_UserCommand_Proc
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Rtu_Proc_485
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRtu_Recv_Proc_485
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Rtu_Proc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRtu_Recv_Proc
</UL>

<P><STRONG><a name="[12f]"></a>Send_packet</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, wifi.o(i.Send_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Send_packet &rArr; SendChar3 &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar3
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Data_Send
</UL>

<P><STRONG><a name="[130]"></a>Set_MAC_Address</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, w5100s_proc.o(i.Set_MAC_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Set_MAC_Address &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Accumulate
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Proc
</UL>

<P><STRONG><a name="[f]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SysTick_Handler &rArr; Systic_Callback_Proc &rArr; Buzzer_Sequence &rArr; PWM_Config &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systic_Callback_Proc
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[134]"></a>SystemClock_Config</STRONG> (Thumb, 134 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>SystemInit</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(.text)
</UL>
<P><STRONG><a name="[133]"></a>Systic_Callback_Proc</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, mytimer.o(i.Systic_Callback_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Systic_Callback_Proc &rArr; Buzzer_Sequence &rArr; PWM_Config &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Sequence
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment_Disp
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f0]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[ff]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[f2]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[f9]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[135]"></a>Tcp_Client_Proc</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, w5100s_proc.o(i.Tcp_Client_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Tcp_Client_Proc &rArr; Ethernet_Proc &rArr; Ether_UserCommand_Proc &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprintf
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Proc
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Proc
</UL>

<P><STRONG><a name="[137]"></a>Tcp_Data_Send</STRONG> (Thumb, 1216 bytes, Stack size 8 bytes, wifi.o(i.Tcp_Data_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Tcp_Data_Send &rArr; mprintf &rArr; SendChar &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprintf
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprintf3
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_packet
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_proc
</UL>

<P><STRONG><a name="[138]"></a>Tcp_Proc</STRONG> (Thumb, 394 bytes, Stack size 8 bytes, w5100s_proc.o(i.Tcp_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Tcp_Proc &rArr; Modbus_Tcp_Proc &rArr; Modbus_Tcp_Recv_Proc &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprintf
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wiznet_W5100S_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Client_Proc
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_MAC_Address
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Client_index
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Tcp_Proc
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[122]"></a>Tcp_Request_Packet</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, w5100s_proc.o(i.Tcp_Request_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Tcp_Request_Packet &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Tcp_Proc
</UL>

<P><STRONG><a name="[13b]"></a>TestMode_Proc</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, test.o(i.TestMode_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TestMode_Proc &rArr; Comm_Test &rArr; SendChar1 &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_Buzzer
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Test
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output_Test
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Input
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Test
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllOff_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13e]"></a>Timer_Proc</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, mytimer.o(i.Timer_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Timer_Proc &rArr; HAL_GPIO_TogglePin
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>UART4_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART4_IRQHandler &rArr; USART4_IRQ_Function
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_IRQ_Function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USART1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART1_IRQHandler &rArr; USART1_IRQ_Function
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQ_Function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[141]"></a>USART1_IRQ_Function</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, rs485.o(i.USART1_IRQ_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQ_Function
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[36]"></a>USART2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART2_IRQHandler &rArr; USART2_IRQ_Function
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQ_Function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[142]"></a>USART2_IRQ_Function</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, debug.o(i.USART2_IRQ_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQ_Function
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[37]"></a>USART3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART3_IRQHandler &rArr; USART3_IRQ_Function
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQ_Function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[143]"></a>USART3_IRQ_Function</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, wifi.o(i.USART3_IRQ_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_IRQ_Function
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[140]"></a>USART4_IRQ_Function</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, rs232c.o(i.USART4_IRQ_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART4_IRQ_Function
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[b]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>UserCommand_Proc</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, debug.o(i.UserCommand_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UserCommand_Proc &rArr; mprintf &rArr; SendChar &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprintf
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_proc
</UL>

<P><STRONG><a name="[145]"></a>View_Packet_Data</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, w5100s_proc.o(i.View_Packet_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = View_Packet_Data &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_tcpinfo
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_rtuinfo
</UL>

<P><STRONG><a name="[146]"></a>W5100SInitialze</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, w5100srelfunctions.o(i.W5100SInitialze))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = W5100SInitialze &rArr; ctlwizchip &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprintf
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wiznet_W5100S_Init
</UL>

<P><STRONG><a name="[148]"></a>W5100SReset</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, w5100srelfunctions.o(i.W5100SReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W5100SReset &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wiznet_W5100S_Init
</UL>

<P><STRONG><a name="[11d]"></a>WIZCHIP_READ</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, w5100s.o(i.WIZCHIP_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wiznet_W5100S_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Client_Proc
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Tcp_Proc
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TxBASE
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RxBASE
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_mdio_write
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_mdio_read
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphylink
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getinterruptmask
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getinterrupt
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
</UL>

<P><STRONG><a name="[16f]"></a>WIZCHIP_READ_BUF</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, w5100s.o(i.WIZCHIP_READ_BUF))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WIZCHIP_READ_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getnetinfo
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
</UL>

<P><STRONG><a name="[11e]"></a>WIZCHIP_WRITE</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, w5100s.o(i.WIZCHIP_WRITE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Client_Proc
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Tcp_Proc
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_mdio_write
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_mdio_read
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setinterruptmask
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_clrinterrupt
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
</UL>

<P><STRONG><a name="[156]"></a>WIZCHIP_WRITE_BUF</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, w5100s.o(i.WIZCHIP_WRITE_BUF))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WIZCHIP_WRITE_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetinfo
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
</UL>

<P><STRONG><a name="[13d]"></a>Wifi_Test</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, test.o(i.Wifi_Test))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMode_Proc
</UL>

<P><STRONG><a name="[149]"></a>Wifi_proc</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, wifi.o(i.Wifi_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Wifi_proc &rArr; Init_Station_mode &rArr; mprintf &rArr; SendChar &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprintf3
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Data_Send
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_packet
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Station_mode
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Signal_Strength
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect_Tcp_Server
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[139]"></a>Wiznet_W5100S_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, w5100s_proc.o(i.Wiznet_W5100S_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Wiznet_W5100S_Init &rArr; W5100SInitialze &rArr; ctlwizchip &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprintf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetinfo
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_wizchip_bus_cbfunc
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100SReset
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100SInitialze
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_network_information
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Proc
</UL>

<P><STRONG><a name="[14e]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[187]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[117]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485_proc
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs232c_proc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_wifimac
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_tcpsip
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_tcpport
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_tcpint
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_ssid
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_spwd
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_sport
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_sip
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_selnum
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_rtutcp
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_rtuint
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_rtuid
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_rtubaud
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_length
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_ip
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_inttime
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_info
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_id
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_gw
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_fcode
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_enable
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_ccnt
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_baud
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_addr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View_Packet_Data
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Request_Packet
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Client_Proc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Tcp_Recv_Proc
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Rtu_Proc_485
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRtu_Recv_Proc_485
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Rtu_Proc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRtu_Recv_Proc
</UL>

<P><STRONG><a name="[188]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[189]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[150]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[18a]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[18b]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[18c]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[16b]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprintf
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprintf3
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[18d]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[18e]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[18f]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[190]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[53]"></a>busReadByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, w5100srelfunctions.o(i.busReadByte))
<BR>[Address Reference Count : 1]<UL><LI> w5100s_proc.o(i.Wiznet_W5100S_Init)
</UL>
<P><STRONG><a name="[52]"></a>busWriteByte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, w5100srelfunctions.o(i.busWriteByte))
<BR>[Address Reference Count : 1]<UL><LI> w5100s_proc.o(i.Wiznet_W5100S_Init)
</UL>
<P><STRONG><a name="[125]"></a>close</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, socket.o(i.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = close &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Proc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Tcp_Proc
</UL>

<P><STRONG><a name="[55]"></a>cmd_help</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, debug.o(i.cmd_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cmd_help &rArr; mprintf &rArr; SendChar &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug.o(.constdata)
</UL>
<P><STRONG><a name="[124]"></a>connect</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, socket.o(i.connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = connect &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Tcp_Proc
</UL>

<P><STRONG><a name="[147]"></a>ctlwizchip</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, wizchip_conf.o(i.ctlwizchip))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ctlwizchip &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphypmode
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphyconf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphypmode
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphylink
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphyconf
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setinterruptmask
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getinterruptmask
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getinterrupt
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_clrinterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100SInitialze
</UL>

<P><STRONG><a name="[123]"></a>disconnect</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, socket.o(i.disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = disconnect &rArr; close &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Proc
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Client_Proc
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Tcp_Proc
</UL>

<P><STRONG><a name="[6e]"></a>eth_cmd_addr</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, w5100s_proc.o(i.eth_cmd_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = eth_cmd_addr &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_WriteData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5100s_proc.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>eth_cmd_baud</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, w5100s_proc.o(i.eth_cmd_baud))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = eth_cmd_baud &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_WriteData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5100s_proc.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>eth_cmd_ccnt</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, w5100s_proc.o(i.eth_cmd_ccnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = eth_cmd_ccnt &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5100s_proc.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>eth_cmd_enable</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, w5100s_proc.o(i.eth_cmd_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = eth_cmd_enable &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_WriteData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5100s_proc.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>eth_cmd_fcode</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, w5100s_proc.o(i.eth_cmd_fcode))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = eth_cmd_fcode &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_WriteData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5100s_proc.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>eth_cmd_gw</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, w5100s_proc.o(i.eth_cmd_gw))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = eth_cmd_gw &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_WriteData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5100s_proc.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>eth_cmd_help</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, w5100s_proc.o(i.eth_cmd_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = eth_cmd_help &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5100s_proc.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>eth_cmd_id</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, w5100s_proc.o(i.eth_cmd_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = eth_cmd_id &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_WriteData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5100s_proc.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>eth_cmd_info</STRONG> (Thumb, 398 bytes, Stack size 24 bytes, w5100s_proc.o(i.eth_cmd_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = eth_cmd_info &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5100s_proc.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>eth_cmd_inttime</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, w5100s_proc.o(i.eth_cmd_inttime))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = eth_cmd_inttime &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_WriteData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5100s_proc.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>eth_cmd_ip</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, w5100s_proc.o(i.eth_cmd_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = eth_cmd_ip &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_WriteData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5100s_proc.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>eth_cmd_length</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, w5100s_proc.o(i.eth_cmd_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = eth_cmd_length &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_WriteData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5100s_proc.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>eth_cmd_mdi</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, w5100s_proc.o(i.eth_cmd_mdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = eth_cmd_mdi &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5100s_proc.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>eth_cmd_mrs</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, w5100s_proc.o(i.eth_cmd_mrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = eth_cmd_mrs &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5100s_proc.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>eth_cmd_mrtu</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, w5100s_proc.o(i.eth_cmd_mrtu))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = eth_cmd_mrtu &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5100s_proc.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>eth_cmd_mtcp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, w5100s_proc.o(i.eth_cmd_mtcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = eth_cmd_mtcp &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5100s_proc.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>eth_cmd_reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, w5100s_proc.o(i.eth_cmd_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = eth_cmd_reset &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5100s_proc.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>eth_cmd_rtubaud</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, w5100s_proc.o(i.eth_cmd_rtubaud))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = eth_cmd_rtubaud &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_WriteData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5100s_proc.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>eth_cmd_rtuid</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, w5100s_proc.o(i.eth_cmd_rtuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = eth_cmd_rtuid &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_WriteData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5100s_proc.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>eth_cmd_rtuinfo</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, w5100s_proc.o(i.eth_cmd_rtuinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = eth_cmd_rtuinfo &rArr; View_Packet_Data &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View_Packet_Data
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5100s_proc.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>eth_cmd_rtuint</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, w5100s_proc.o(i.eth_cmd_rtuint))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = eth_cmd_rtuint &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_WriteData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5100s_proc.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>eth_cmd_rtutcp</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, w5100s_proc.o(i.eth_cmd_rtutcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = eth_cmd_rtutcp &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_WriteData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5100s_proc.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>eth_cmd_selnum</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, w5100s_proc.o(i.eth_cmd_selnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = eth_cmd_selnum &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5100s_proc.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>eth_cmd_sip</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, w5100s_proc.o(i.eth_cmd_sip))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = eth_cmd_sip &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_WriteData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5100s_proc.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>eth_cmd_sport</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, w5100s_proc.o(i.eth_cmd_sport))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = eth_cmd_sport &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_WriteData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5100s_proc.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>eth_cmd_spwd</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, w5100s_proc.o(i.eth_cmd_spwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = eth_cmd_spwd &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_WriteData
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5100s_proc.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>eth_cmd_ssid</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, w5100s_proc.o(i.eth_cmd_ssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = eth_cmd_ssid &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_WriteData
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5100s_proc.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>eth_cmd_tcpinfo</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, w5100s_proc.o(i.eth_cmd_tcpinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = eth_cmd_tcpinfo &rArr; View_Packet_Data &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View_Packet_Data
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5100s_proc.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>eth_cmd_tcpint</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, w5100s_proc.o(i.eth_cmd_tcpint))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = eth_cmd_tcpint &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_WriteData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5100s_proc.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>eth_cmd_tcpport</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, w5100s_proc.o(i.eth_cmd_tcpport))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = eth_cmd_tcpport &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_WriteData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5100s_proc.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>eth_cmd_tcpsip</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, w5100s_proc.o(i.eth_cmd_tcpsip))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = eth_cmd_tcpsip &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_WriteData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5100s_proc.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>eth_cmd_wifimac</STRONG> (Thumb, 406 bytes, Stack size 40 bytes, w5100s_proc.o(i.eth_cmd_wifimac))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = eth_cmd_wifimac &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprintf
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_WriteData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5100s_proc.o(.constdata)
</UL>
<P><STRONG><a name="[11f]"></a>getSn_RX_RSR</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, w5100s.o(i.getSn_RX_RSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getSn_RX_RSR &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Client_Proc
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Tcp_Proc
</UL>

<P><STRONG><a name="[165]"></a>getSn_RxBASE</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, w5100s.o(i.getSn_RxBASE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getSn_RxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
</UL>

<P><STRONG><a name="[166]"></a>getSn_TX_FSR</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, w5100s.o(i.getSn_TX_FSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getSn_TX_FSR &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>

<P><STRONG><a name="[167]"></a>getSn_TxBASE</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, w5100s.o(i.getSn_TxBASE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
</UL>

<P><STRONG><a name="[b0]"></a>get_entry</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, debug.o(i.get_entry))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_wifimac
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_tcpsip
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_tcpport
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_tcpint
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_tcpinfo
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_sport
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_sip
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_selnum
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_rtutcp
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_rtuint
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_rtuinfo
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_rtuid
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_rtubaud
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_length
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_ip
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_inttime
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_id
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_gw
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_fcode
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_enable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_baud
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_addr
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ether_UserCommand_Proc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCommand_Proc
</UL>

<P><STRONG><a name="[170]"></a>init_crc16_tab</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, modbus.o(i.init_crc16_tab))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = init_crc16_tab
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_crc_16
</UL>

<P><STRONG><a name="[136]"></a>listen</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, socket.o(i.listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = listen &rArr; close &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Client_Proc
</UL>

<P><STRONG><a name="[4c]"></a>main</STRONG> (Thumb, 284 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = main &rArr; Rs485_proc &rArr; Modbus_Rtu_Proc_485 &rArr; Send_Ethernet_Packet &rArr; send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprintf
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_proc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Proc
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMode_Proc
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Proc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment_Disp
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seg_data_set
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485_proc
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs232c_proc
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Repeater_Proc
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_Buzzer
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output_Proc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputKey_Proc
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Version
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Segment
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_proc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FSMC_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[a1]"></a>mprintf</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, debug.o(i.mprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mprintf &rArr; SendChar &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Proc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5100SInitialze
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_network_information
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_cmd_wifimac
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wiznet_W5100S_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Client_Proc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Tcp_Recv_Proc
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Tcp_Proc
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRtu_Recv_Proc_485
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRom_WriteData
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_help
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserCommand_Proc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRtu_Recv_Proc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Data_Send
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Station_mode
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect_Tcp_Server
</UL>

<P><STRONG><a name="[a0]"></a>mprintf3</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, wifi.o(i.mprintf3))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mprintf3 &rArr; SendChar3 &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar3
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_proc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Data_Send
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Station_mode
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Signal_Strength
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect_Tcp_Server
</UL>

<P><STRONG><a name="[14d]"></a>print_network_information</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, w5100s_proc.o(i.print_network_information))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = print_network_information &rArr; mprintf &rArr; SendChar &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mprintf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getnetinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wiznet_W5100S_Init
</UL>

<P><STRONG><a name="[120]"></a>recv</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, socket.o(i.recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = recv &rArr; wiz_recv_data &rArr; getSn_RxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Client_Proc
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Tcp_Proc
</UL>

<P><STRONG><a name="[14b]"></a>reg_wizchip_bus_cbfunc</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, wizchip_conf.o(i.reg_wizchip_bus_cbfunc))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wiznet_W5100S_Init
</UL>

<P><STRONG><a name="[12e]"></a>send</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, socket.o(i.send))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = send &rArr; wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Request_Packet
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ethernet_Packet
</UL>

<P><STRONG><a name="[126]"></a>socket</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, socket.o(i.socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = socket &rArr; close &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcp_Client_Proc
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Tcp_Proc
</UL>

<P><STRONG><a name="[11a]"></a>update_crc_16</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, modbus.o(i.update_crc_16))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = update_crc_16 &rArr; init_crc16_tab
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_crc16_tab
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Rtu_Proc_485
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Rtu_Proc
</UL>

<P><STRONG><a name="[171]"></a>wiz_mdio_read</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, w5100s.o(i.wiz_mdio_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wiz_mdio_read &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphypmode
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphyconf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphyconf
</UL>

<P><STRONG><a name="[172]"></a>wiz_mdio_write</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, w5100s.o(i.wiz_mdio_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wiz_mdio_write &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphypmode
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphyconf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
</UL>

<P><STRONG><a name="[16d]"></a>wiz_recv_data</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, w5100s.o(i.wiz_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wiz_recv_data &rArr; getSn_RxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RxBASE
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>

<P><STRONG><a name="[16e]"></a>wiz_send_data</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, w5100s.o(i.wiz_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wiz_send_data &rArr; getSn_TxBASE &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TxBASE
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[4]"></a>wizchip_bus_readdata</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_bus_readdata))
<BR>[Address Reference Count : 2]<UL><LI> wizchip_conf.o(i.reg_wizchip_bus_cbfunc)
<LI> wizchip_conf.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>wizchip_bus_writedata</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_bus_writedata))
<BR>[Address Reference Count : 2]<UL><LI> wizchip_conf.o(i.reg_wizchip_bus_cbfunc)
<LI> wizchip_conf.o(.data)
</UL>
<P><STRONG><a name="[159]"></a>wizchip_clrinterrupt</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wizchip_conf.o(i.wizchip_clrinterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_clrinterrupt &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[0]"></a>wizchip_cris_enter</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_cris_enter))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>wizchip_cris_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_cris_exit))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>wizchip_cs_deselect</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_cs_deselect))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>wizchip_cs_select</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_cs_select))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.data)
</UL>
<P><STRONG><a name="[15a]"></a>wizchip_getinterrupt</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wizchip_conf.o(i.wizchip_getinterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_getinterrupt &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[15c]"></a>wizchip_getinterruptmask</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wizchip_conf.o(i.wizchip_getinterruptmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_getinterruptmask &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[16c]"></a>wizchip_getnetinfo</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, wizchip_conf.o(i.wizchip_getnetinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_getnetinfo &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_network_information
</UL>

<P><STRONG><a name="[158]"></a>wizchip_init</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, wizchip_conf.o(i.wizchip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[15b]"></a>wizchip_setinterruptmask</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wizchip_conf.o(i.wizchip_setinterruptmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_setinterruptmask &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[14c]"></a>wizchip_setnetinfo</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, wizchip_conf.o(i.wizchip_setnetinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_setnetinfo &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wiznet_W5100S_Init
</UL>

<P><STRONG><a name="[157]"></a>wizchip_sw_reset</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, wizchip_conf.o(i.wizchip_sw_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wizchip_sw_reset &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
</UL>

<P><STRONG><a name="[15f]"></a>wizphy_getphyconf</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, wizchip_conf.o(i.wizphy_getphyconf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wizphy_getphyconf &rArr; wiz_mdio_read &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_mdio_read
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[162]"></a>wizphy_getphylink</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wizchip_conf.o(i.wizphy_getphylink))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wizphy_getphylink &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[161]"></a>wizphy_getphypmode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizphy_getphypmode))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[15d]"></a>wizphy_reset</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wizchip_conf.o(i.wizphy_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wizphy_reset &rArr; wiz_mdio_write &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_mdio_write
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_mdio_read
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[15e]"></a>wizphy_setphyconf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wizchip_conf.o(i.wizphy_setphyconf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wizphy_setphyconf &rArr; wiz_mdio_write &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_mdio_write
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_mdio_read
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[160]"></a>wizphy_setphypmode</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, wizchip_conf.o(i.wizphy_setphypmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wizphy_setphypmode &rArr; wiz_mdio_write &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_mdio_write
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_mdio_read
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[105]"></a>MX_ADC1_Init</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, main.o(i.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADCEx_Calibration_Start &rArr; HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetState
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[108]"></a>MX_CRC_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i.MX_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_CRC_Init &rArr; HAL_CRC_Init &rArr; HAL_CRC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109]"></a>MX_DMA_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10a]"></a>MX_FSMC_Init</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, main.o(i.MX_FSMC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = MX_FSMC_Init &rArr; HAL_NOR_Init &rArr; HAL_NOR_MspInit &rArr; HAL_FSMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10b]"></a>MX_GPIO_Init</STRONG> (Thumb, 500 bytes, Stack size 24 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_GPIO_Init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10c]"></a>MX_IWDG_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(i.MX_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_IWDG_Init &rArr; HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10e]"></a>MX_SPI2_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(i.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10f]"></a>MX_TIM4_Init</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, main.o(i.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[111]"></a>MX_UART4_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(i.MX_UART4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_UART4_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[112]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[113]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>HAL_FSMC_MspInit</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, stm32f1xx_hal_msp.o(i.HAL_FSMC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_FSMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_MspInit
</UL>

<P><STRONG><a name="[eb]"></a>RCC_Delay</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f1xx_hal_rcc.o(i.RCC_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[cf]"></a>DMA_SetConfig</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f1xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[e2]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[e3]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[d2]"></a>FLASH_Program_HalfWord</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f1xx_hal_flash.o(i.FLASH_Program_HalfWord))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[b5]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, stm32f1xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[d0]"></a>FLASH_MassErase</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f1xx_hal_flash_ex.o(i.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[f4]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[f8]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[fa]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[fb]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[f3]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[f5]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[102]"></a>UART_SetConfig</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[151]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[14f]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[154]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[153]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[54]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0sprintf)
<LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
